// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: firecracker.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DriveExposePolicy is used to configure the method to expose drive files.
// "COPY" is copying the files to the jail, which is the default behavior.
// "BIND" is bind-mounting the files on the jail, assuming a caller pre-configures the permissions of
// the files appropriately.
type DriveExposePolicy int32

const (
	DriveExposePolicy_COPY DriveExposePolicy = 0
	DriveExposePolicy_BIND DriveExposePolicy = 1
)

// Enum value maps for DriveExposePolicy.
var (
	DriveExposePolicy_name = map[int32]string{
		0: "COPY",
		1: "BIND",
	}
	DriveExposePolicy_value = map[string]int32{
		"COPY": 0,
		"BIND": 1,
	}
)

func (x DriveExposePolicy) Enum() *DriveExposePolicy {
	p := new(DriveExposePolicy)
	*p = x
	return p
}

func (x DriveExposePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveExposePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_firecracker_proto_enumTypes[0].Descriptor()
}

func (DriveExposePolicy) Type() protoreflect.EnumType {
	return &file_firecracker_proto_enumTypes[0]
}

func (x DriveExposePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveExposePolicy.Descriptor instead.
func (DriveExposePolicy) EnumDescriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{0}
}

// CreateVMRequest specifies creation parameters for a new FC instance
type CreateVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VM identifier to assign
	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	// Specifies the machine configuration for the VM
	MachineCfg *FirecrackerMachineConfiguration `protobuf:"bytes,2,opt,name=MachineCfg,proto3" json:"MachineCfg,omitempty"`
	// Specifies the file path where the kernel image is located
	KernelImagePath string `protobuf:"bytes,3,opt,name=KernelImagePath,proto3" json:"KernelImagePath,omitempty"`
	// Specifies the commandline arguments that should be passed to the kernel
	KernelArgs string `protobuf:"bytes,4,opt,name=KernelArgs,proto3" json:"KernelArgs,omitempty"`
	// Specifies drive containing the rootfs of the VM
	RootDrive *FirecrackerRootDrive `protobuf:"bytes,5,opt,name=RootDrive,proto3" json:"RootDrive,omitempty"`
	// Specifies additional drives whose contents will be mounted inside the VM on boot.
	DriveMounts []*FirecrackerDriveMount `protobuf:"bytes,6,rep,name=DriveMounts,proto3" json:"DriveMounts,omitempty"`
	// Specifies the networking configuration for a VM
	NetworkInterfaces []*FirecrackerNetworkInterface `protobuf:"bytes,7,rep,name=NetworkInterfaces,proto3" json:"NetworkInterfaces,omitempty"`
	// The number of dummy drives to reserve in advance before running FC instance.
	ContainerCount int32 `protobuf:"varint,8,opt,name=ContainerCount,proto3" json:"ContainerCount,omitempty"`
	// Whether the VM should exit after all tasks running in it have been deleted.
	ExitAfterAllTasksDeleted bool                      `protobuf:"varint,9,opt,name=ExitAfterAllTasksDeleted,proto3" json:"ExitAfterAllTasksDeleted,omitempty"`
	JailerConfig             *JailerConfig             `protobuf:"bytes,10,opt,name=JailerConfig,proto3" json:"JailerConfig,omitempty"`
	TimeoutSeconds           uint32                    `protobuf:"varint,11,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
	LogFifoPath              string                    `protobuf:"bytes,12,opt,name=LogFifoPath,proto3" json:"LogFifoPath,omitempty"`
	MetricsFifoPath          string                    `protobuf:"bytes,13,opt,name=MetricsFifoPath,proto3" json:"MetricsFifoPath,omitempty"`
	BalloonDevice            *FirecrackerBalloonDevice `protobuf:"bytes,14,opt,name=BalloonDevice,proto3" json:"BalloonDevice,omitempty"`
	// The network namespace of the VM.
	NetNS string `protobuf:"bytes,15,opt,name=NetNS,proto3" json:"NetNS,omitempty"`
	// Whether the VM should be created by loading a snapshot.
	LoadSnapshot bool `protobuf:"varint,16,opt,name=LoadSnapshot,proto3" json:"LoadSnapshot,omitempty"`
	// Path to the file that contains the guest memory to be loaded.
	MemFilePath string `protobuf:"bytes,17,opt,name=MemFilePath,proto3" json:"MemFilePath,omitempty"`
	// Path to the file that contains the VM state to be loaded.
	SnapshotPath string `protobuf:"bytes,18,opt,name=SnapshotPath,proto3" json:"SnapshotPath,omitempty"`
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVMRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *CreateVMRequest) GetMachineCfg() *FirecrackerMachineConfiguration {
	if x != nil {
		return x.MachineCfg
	}
	return nil
}

func (x *CreateVMRequest) GetKernelImagePath() string {
	if x != nil {
		return x.KernelImagePath
	}
	return ""
}

func (x *CreateVMRequest) GetKernelArgs() string {
	if x != nil {
		return x.KernelArgs
	}
	return ""
}

func (x *CreateVMRequest) GetRootDrive() *FirecrackerRootDrive {
	if x != nil {
		return x.RootDrive
	}
	return nil
}

func (x *CreateVMRequest) GetDriveMounts() []*FirecrackerDriveMount {
	if x != nil {
		return x.DriveMounts
	}
	return nil
}

func (x *CreateVMRequest) GetNetworkInterfaces() []*FirecrackerNetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *CreateVMRequest) GetContainerCount() int32 {
	if x != nil {
		return x.ContainerCount
	}
	return 0
}

func (x *CreateVMRequest) GetExitAfterAllTasksDeleted() bool {
	if x != nil {
		return x.ExitAfterAllTasksDeleted
	}
	return false
}

func (x *CreateVMRequest) GetJailerConfig() *JailerConfig {
	if x != nil {
		return x.JailerConfig
	}
	return nil
}

func (x *CreateVMRequest) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *CreateVMRequest) GetLogFifoPath() string {
	if x != nil {
		return x.LogFifoPath
	}
	return ""
}

func (x *CreateVMRequest) GetMetricsFifoPath() string {
	if x != nil {
		return x.MetricsFifoPath
	}
	return ""
}

func (x *CreateVMRequest) GetBalloonDevice() *FirecrackerBalloonDevice {
	if x != nil {
		return x.BalloonDevice
	}
	return nil
}

func (x *CreateVMRequest) GetNetNS() string {
	if x != nil {
		return x.NetNS
	}
	return ""
}

func (x *CreateVMRequest) GetLoadSnapshot() bool {
	if x != nil {
		return x.LoadSnapshot
	}
	return false
}

func (x *CreateVMRequest) GetMemFilePath() string {
	if x != nil {
		return x.MemFilePath
	}
	return ""
}

func (x *CreateVMRequest) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

type CreateVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID            string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	SocketPath      string `protobuf:"bytes,2,opt,name=SocketPath,proto3" json:"SocketPath,omitempty"`
	LogFifoPath     string `protobuf:"bytes,3,opt,name=LogFifoPath,proto3" json:"LogFifoPath,omitempty"`
	MetricsFifoPath string `protobuf:"bytes,4,opt,name=MetricsFifoPath,proto3" json:"MetricsFifoPath,omitempty"`
	CgroupPath      string `protobuf:"bytes,5,opt,name=CgroupPath,proto3" json:"CgroupPath,omitempty"`
}

func (x *CreateVMResponse) Reset() {
	*x = CreateVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMResponse) ProtoMessage() {}

func (x *CreateVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMResponse.ProtoReflect.Descriptor instead.
func (*CreateVMResponse) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVMResponse) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *CreateVMResponse) GetSocketPath() string {
	if x != nil {
		return x.SocketPath
	}
	return ""
}

func (x *CreateVMResponse) GetLogFifoPath() string {
	if x != nil {
		return x.LogFifoPath
	}
	return ""
}

func (x *CreateVMResponse) GetMetricsFifoPath() string {
	if x != nil {
		return x.MetricsFifoPath
	}
	return ""
}

func (x *CreateVMResponse) GetCgroupPath() string {
	if x != nil {
		return x.CgroupPath
	}
	return ""
}

type CreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID         string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	MemFilePath  string `protobuf:"bytes,2,opt,name=MemFilePath,proto3" json:"MemFilePath,omitempty"`
	SnapshotPath string `protobuf:"bytes,3,opt,name=SnapshotPath,proto3" json:"SnapshotPath,omitempty"`
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSnapshotRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *CreateSnapshotRequest) GetMemFilePath() string {
	if x != nil {
		return x.MemFilePath
	}
	return ""
}

func (x *CreateSnapshotRequest) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

type PauseVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
}

func (x *PauseVMRequest) Reset() {
	*x = PauseVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVMRequest) ProtoMessage() {}

func (x *PauseVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVMRequest.ProtoReflect.Descriptor instead.
func (*PauseVMRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{3}
}

func (x *PauseVMRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

type ResumeVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
}

func (x *ResumeVMRequest) Reset() {
	*x = ResumeVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVMRequest) ProtoMessage() {}

func (x *ResumeVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVMRequest.ProtoReflect.Descriptor instead.
func (*ResumeVMRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{4}
}

func (x *ResumeVMRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

type StopVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID           string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	TimeoutSeconds uint32 `protobuf:"varint,2,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
}

func (x *StopVMRequest) Reset() {
	*x = StopVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMRequest) ProtoMessage() {}

func (x *StopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMRequest.ProtoReflect.Descriptor instead.
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{5}
}

func (x *StopVMRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *StopVMRequest) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type GetVMInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
}

func (x *GetVMInfoRequest) Reset() {
	*x = GetVMInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMInfoRequest) ProtoMessage() {}

func (x *GetVMInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMInfoRequest.ProtoReflect.Descriptor instead.
func (*GetVMInfoRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{6}
}

func (x *GetVMInfoRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

type GetVMInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID            string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	SocketPath      string `protobuf:"bytes,2,opt,name=SocketPath,proto3" json:"SocketPath,omitempty"`
	LogFifoPath     string `protobuf:"bytes,3,opt,name=LogFifoPath,proto3" json:"LogFifoPath,omitempty"`
	MetricsFifoPath string `protobuf:"bytes,4,opt,name=MetricsFifoPath,proto3" json:"MetricsFifoPath,omitempty"`
	CgroupPath      string `protobuf:"bytes,5,opt,name=CgroupPath,proto3" json:"CgroupPath,omitempty"`
	VSockPath       string `protobuf:"bytes,6,opt,name=VSockPath,proto3" json:"VSockPath,omitempty"`
}

func (x *GetVMInfoResponse) Reset() {
	*x = GetVMInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMInfoResponse) ProtoMessage() {}

func (x *GetVMInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMInfoResponse.ProtoReflect.Descriptor instead.
func (*GetVMInfoResponse) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{7}
}

func (x *GetVMInfoResponse) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *GetVMInfoResponse) GetSocketPath() string {
	if x != nil {
		return x.SocketPath
	}
	return ""
}

func (x *GetVMInfoResponse) GetLogFifoPath() string {
	if x != nil {
		return x.LogFifoPath
	}
	return ""
}

func (x *GetVMInfoResponse) GetMetricsFifoPath() string {
	if x != nil {
		return x.MetricsFifoPath
	}
	return ""
}

func (x *GetVMInfoResponse) GetCgroupPath() string {
	if x != nil {
		return x.CgroupPath
	}
	return ""
}

func (x *GetVMInfoResponse) GetVSockPath() string {
	if x != nil {
		return x.VSockPath
	}
	return ""
}

type SetVMMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID     string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	Metadata string `protobuf:"bytes,2,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *SetVMMetadataRequest) Reset() {
	*x = SetVMMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVMMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVMMetadataRequest) ProtoMessage() {}

func (x *SetVMMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVMMetadataRequest.ProtoReflect.Descriptor instead.
func (*SetVMMetadataRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{8}
}

func (x *SetVMMetadataRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *SetVMMetadataRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type UpdateVMMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID     string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	Metadata string `protobuf:"bytes,2,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *UpdateVMMetadataRequest) Reset() {
	*x = UpdateVMMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMMetadataRequest) ProtoMessage() {}

func (x *UpdateVMMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMMetadataRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateVMMetadataRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *UpdateVMMetadataRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type GetVMMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
}

func (x *GetVMMetadataRequest) Reset() {
	*x = GetVMMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMMetadataRequest) ProtoMessage() {}

func (x *GetVMMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetVMMetadataRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{10}
}

func (x *GetVMMetadataRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

type GetVMMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata string `protobuf:"bytes,1,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *GetVMMetadataResponse) Reset() {
	*x = GetVMMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMMetadataResponse) ProtoMessage() {}

func (x *GetVMMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetVMMetadataResponse) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{11}
}

func (x *GetVMMetadataResponse) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type JailerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetNS string `protobuf:"bytes,1,opt,name=NetNS,proto3" json:"NetNS,omitempty"`
	// List of the physical numbers of the CPUs on which processes in that
	// cpuset are allowed to execute.  See List Format below for a description
	// of the format of cpus.
	//
	// The CPUs allowed to a cpuset may be changed by writing a new list to its
	// cpus file.
	// Taken from http://man7.org/linux/man-pages/man7/cpuset.7.html
	//
	// This is formatted as specified in the cpuset man page under "List Format"
	// http://man7.org/linux/man-pages/man7/cpuset.7.html
	CPUs string `protobuf:"bytes,2,opt,name=CPUs,proto3" json:"CPUs,omitempty"`
	// List of memory nodes on which processes in this cpuset are allowed to
	// allocate memory.  See List Format below for a description of the format
	// of mems.
	// Taken from http://man7.org/linux/man-pages/man7/cpuset.7.html
	//
	// This is formatted as specified in the cpuset man page under "List Format"
	// http://man7.org/linux/man-pages/man7/cpuset.7.html
	Mems string `protobuf:"bytes,3,opt,name=Mems,proto3" json:"Mems,omitempty"`
	UID  uint32 `protobuf:"varint,4,opt,name=UID,proto3" json:"UID,omitempty"`
	GID  uint32 `protobuf:"varint,5,opt,name=GID,proto3" json:"GID,omitempty"`
	// CgroupPath is used to dictate where the cgroup should be located
	// relative to the cgroup directory which is
	// /sys/fs/cgroup/cpu/<CgroupPath>/<vmID>
	// if no value was provided, then /firecracker-containerd will be used as
	// the default value
	CgroupPath string `protobuf:"bytes,6,opt,name=CgroupPath,proto3" json:"CgroupPath,omitempty"`
	// DriveExposePolicy is used to configure the method to expose drive files.
	DriveExposePolicy DriveExposePolicy `protobuf:"varint,7,opt,name=DriveExposePolicy,proto3,enum=DriveExposePolicy" json:"DriveExposePolicy,omitempty"`
}

func (x *JailerConfig) Reset() {
	*x = JailerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JailerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JailerConfig) ProtoMessage() {}

func (x *JailerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JailerConfig.ProtoReflect.Descriptor instead.
func (*JailerConfig) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{12}
}

func (x *JailerConfig) GetNetNS() string {
	if x != nil {
		return x.NetNS
	}
	return ""
}

func (x *JailerConfig) GetCPUs() string {
	if x != nil {
		return x.CPUs
	}
	return ""
}

func (x *JailerConfig) GetMems() string {
	if x != nil {
		return x.Mems
	}
	return ""
}

func (x *JailerConfig) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *JailerConfig) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *JailerConfig) GetCgroupPath() string {
	if x != nil {
		return x.CgroupPath
	}
	return ""
}

func (x *JailerConfig) GetDriveExposePolicy() DriveExposePolicy {
	if x != nil {
		return x.DriveExposePolicy
	}
	return DriveExposePolicy_COPY
}

type UpdateBalloonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID      string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	AmountMib int64  `protobuf:"varint,2,opt,name=AmountMib,proto3" json:"AmountMib,omitempty"`
}

func (x *UpdateBalloonRequest) Reset() {
	*x = UpdateBalloonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalloonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalloonRequest) ProtoMessage() {}

func (x *UpdateBalloonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalloonRequest.ProtoReflect.Descriptor instead.
func (*UpdateBalloonRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateBalloonRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *UpdateBalloonRequest) GetAmountMib() int64 {
	if x != nil {
		return x.AmountMib
	}
	return 0
}

type GetBalloonConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
}

func (x *GetBalloonConfigRequest) Reset() {
	*x = GetBalloonConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalloonConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalloonConfigRequest) ProtoMessage() {}

func (x *GetBalloonConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalloonConfigRequest.ProtoReflect.Descriptor instead.
func (*GetBalloonConfigRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{14}
}

func (x *GetBalloonConfigRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

type GetBalloonConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalloonConfig *FirecrackerBalloonDevice `protobuf:"bytes,1,opt,name=BalloonConfig,proto3" json:"BalloonConfig,omitempty"`
}

func (x *GetBalloonConfigResponse) Reset() {
	*x = GetBalloonConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalloonConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalloonConfigResponse) ProtoMessage() {}

func (x *GetBalloonConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalloonConfigResponse.ProtoReflect.Descriptor instead.
func (*GetBalloonConfigResponse) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{15}
}

func (x *GetBalloonConfigResponse) GetBalloonConfig() *FirecrackerBalloonDevice {
	if x != nil {
		return x.BalloonConfig
	}
	return nil
}

type GetBalloonStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
}

func (x *GetBalloonStatsRequest) Reset() {
	*x = GetBalloonStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalloonStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalloonStatsRequest) ProtoMessage() {}

func (x *GetBalloonStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalloonStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBalloonStatsRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{16}
}

func (x *GetBalloonStatsRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

type GetBalloonStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual amount of memory (in MiB) the device is holding.
	ActualMib int64 `protobuf:"varint,1,opt,name=ActualMib,proto3" json:"ActualMib,omitempty"`
	// Actual number of pages the device is holding.
	ActualPages int64 `protobuf:"varint,2,opt,name=ActualPages,proto3" json:"ActualPages,omitempty"`
	// An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.
	AvailableMemory int64 `protobuf:"varint,3,opt,name=AvailableMemory,proto3" json:"AvailableMemory,omitempty"`
	// The amount of memory, in bytes, that can be quickly reclaimed without additional I/O.
	// Typically these pages are used for caching files from disk.
	DiskCaches int64 `protobuf:"varint,4,opt,name=DiskCaches,proto3" json:"DiskCaches,omitempty"`
	// The amount of memory not being used for any purpose (in bytes).
	FreeMemory int64 `protobuf:"varint,5,opt,name=FreeMemory,proto3" json:"FreeMemory,omitempty"`
	// The number of successful hugetlb page allocations in the guest.
	HugetlbAllocations int64 `protobuf:"varint,6,opt,name=HugetlbAllocations,proto3" json:"HugetlbAllocations,omitempty"`
	// The number of failed hugetlb page allocations in the guest.
	HugetlbFailures int64 `protobuf:"varint,7,opt,name=HugetlbFailures,proto3" json:"HugetlbFailures,omitempty"`
	// The number of major page faults that have occurred.
	MajorFaults int64 `protobuf:"varint,8,opt,name=MajorFaults,proto3" json:"MajorFaults,omitempty"`
	// The number of minor page faults that have occurred.
	MinorFaults int64 `protobuf:"varint,9,opt,name=MinorFaults,proto3" json:"MinorFaults,omitempty"`
	// The amount of memory that has been swapped in (in bytes).
	SwapIn int64 `protobuf:"varint,10,opt,name=SwapIn,proto3" json:"SwapIn,omitempty"`
	// The amount of memory that has been swapped out to disk (in bytes).
	SwapOut int64 `protobuf:"varint,11,opt,name=SwapOut,proto3" json:"SwapOut,omitempty"`
	// Target amount of memory (in MiB) the device aims to hold.
	TargetMib int64 `protobuf:"varint,12,opt,name=TargetMib,proto3" json:"TargetMib,omitempty"`
	// Target number of pages the device aims to hold.
	TargetPages int64 `protobuf:"varint,13,opt,name=TargetPages,proto3" json:"TargetPages,omitempty"`
	// The total amount of memory available (in bytes).
	TotalMemory int64 `protobuf:"varint,14,opt,name=TotalMemory,proto3" json:"TotalMemory,omitempty"`
}

func (x *GetBalloonStatsResponse) Reset() {
	*x = GetBalloonStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalloonStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalloonStatsResponse) ProtoMessage() {}

func (x *GetBalloonStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalloonStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBalloonStatsResponse) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{17}
}

func (x *GetBalloonStatsResponse) GetActualMib() int64 {
	if x != nil {
		return x.ActualMib
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetActualPages() int64 {
	if x != nil {
		return x.ActualPages
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetAvailableMemory() int64 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetDiskCaches() int64 {
	if x != nil {
		return x.DiskCaches
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetFreeMemory() int64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetHugetlbAllocations() int64 {
	if x != nil {
		return x.HugetlbAllocations
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetHugetlbFailures() int64 {
	if x != nil {
		return x.HugetlbFailures
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetMajorFaults() int64 {
	if x != nil {
		return x.MajorFaults
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetMinorFaults() int64 {
	if x != nil {
		return x.MinorFaults
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetSwapIn() int64 {
	if x != nil {
		return x.SwapIn
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetSwapOut() int64 {
	if x != nil {
		return x.SwapOut
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetTargetMib() int64 {
	if x != nil {
		return x.TargetMib
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetTargetPages() int64 {
	if x != nil {
		return x.TargetPages
	}
	return 0
}

func (x *GetBalloonStatsResponse) GetTotalMemory() int64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

type UpdateBalloonStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMID                  string `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	StatsPollingIntervals int64  `protobuf:"varint,2,opt,name=StatsPollingIntervals,proto3" json:"StatsPollingIntervals,omitempty"`
}

func (x *UpdateBalloonStatsRequest) Reset() {
	*x = UpdateBalloonStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firecracker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalloonStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalloonStatsRequest) ProtoMessage() {}

func (x *UpdateBalloonStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firecracker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalloonStatsRequest.ProtoReflect.Descriptor instead.
func (*UpdateBalloonStatsRequest) Descriptor() ([]byte, []int) {
	return file_firecracker_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateBalloonStatsRequest) GetVMID() string {
	if x != nil {
		return x.VMID
	}
	return ""
}

func (x *UpdateBalloonStatsRequest) GetStatsPollingIntervals() int64 {
	if x != nil {
		return x.StatsPollingIntervals
	}
	return 0
}

var File_firecracker_proto protoreflect.FileDescriptor

var file_firecracker_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb8, 0x06, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x09,
	0x52, 0x6f, 0x6f, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x45, 0x78, 0x69, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4a, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x66, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0d, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x65, 0x74, 0x4e, 0x53, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x65, 0x74, 0x4e,
	0x53, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb2, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x56, 0x4d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x66, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x71, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44,
	0x22, 0x4b, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x26, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x56, 0x4d, 0x49, 0x44, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56,
	0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x66, 0x6f,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x46, 0x69, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x56,
	0x53, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x56, 0x53, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56,
	0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x01,
	0x0a, 0x0c, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x65, 0x74, 0x4e, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x65, 0x74, 0x4e, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x50, 0x55, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x50, 0x55, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x40, 0x0a, 0x11, 0x44, 0x72, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x11, 0x44, 0x72, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x48, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c,
	0x6f, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x62, 0x22, 0x2d, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c,
	0x6f, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x22, 0xf5, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x69, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x69, 0x62,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x46, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x48, 0x75, 0x67, 0x65, 0x74, 0x6c, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x48, 0x75, 0x67, 0x65, 0x74, 0x6c,
	0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x48, 0x75, 0x67, 0x65, 0x74, 0x6c, 0x62, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x48, 0x75, 0x67, 0x65, 0x74, 0x6c, 0x62, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x77,
	0x61, 0x70, 0x49, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x65,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56,
	0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x2a, 0x27, 0x0a, 0x11, 0x44, 0x72, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f,
	0x50, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x01, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_firecracker_proto_rawDescOnce sync.Once
	file_firecracker_proto_rawDescData = file_firecracker_proto_rawDesc
)

func file_firecracker_proto_rawDescGZIP() []byte {
	file_firecracker_proto_rawDescOnce.Do(func() {
		file_firecracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_firecracker_proto_rawDescData)
	})
	return file_firecracker_proto_rawDescData
}

var file_firecracker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_firecracker_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_firecracker_proto_goTypes = []interface{}{
	(DriveExposePolicy)(0),                  // 0: DriveExposePolicy
	(*CreateVMRequest)(nil),                 // 1: CreateVMRequest
	(*CreateVMResponse)(nil),                // 2: CreateVMResponse
	(*CreateSnapshotRequest)(nil),           // 3: CreateSnapshotRequest
	(*PauseVMRequest)(nil),                  // 4: PauseVMRequest
	(*ResumeVMRequest)(nil),                 // 5: ResumeVMRequest
	(*StopVMRequest)(nil),                   // 6: StopVMRequest
	(*GetVMInfoRequest)(nil),                // 7: GetVMInfoRequest
	(*GetVMInfoResponse)(nil),               // 8: GetVMInfoResponse
	(*SetVMMetadataRequest)(nil),            // 9: SetVMMetadataRequest
	(*UpdateVMMetadataRequest)(nil),         // 10: UpdateVMMetadataRequest
	(*GetVMMetadataRequest)(nil),            // 11: GetVMMetadataRequest
	(*GetVMMetadataResponse)(nil),           // 12: GetVMMetadataResponse
	(*JailerConfig)(nil),                    // 13: JailerConfig
	(*UpdateBalloonRequest)(nil),            // 14: UpdateBalloonRequest
	(*GetBalloonConfigRequest)(nil),         // 15: GetBalloonConfigRequest
	(*GetBalloonConfigResponse)(nil),        // 16: GetBalloonConfigResponse
	(*GetBalloonStatsRequest)(nil),          // 17: GetBalloonStatsRequest
	(*GetBalloonStatsResponse)(nil),         // 18: GetBalloonStatsResponse
	(*UpdateBalloonStatsRequest)(nil),       // 19: UpdateBalloonStatsRequest
	(*FirecrackerMachineConfiguration)(nil), // 20: FirecrackerMachineConfiguration
	(*FirecrackerRootDrive)(nil),            // 21: FirecrackerRootDrive
	(*FirecrackerDriveMount)(nil),           // 22: FirecrackerDriveMount
	(*FirecrackerNetworkInterface)(nil),     // 23: FirecrackerNetworkInterface
	(*FirecrackerBalloonDevice)(nil),        // 24: FirecrackerBalloonDevice
}
var file_firecracker_proto_depIdxs = []int32{
	20, // 0: CreateVMRequest.MachineCfg:type_name -> FirecrackerMachineConfiguration
	21, // 1: CreateVMRequest.RootDrive:type_name -> FirecrackerRootDrive
	22, // 2: CreateVMRequest.DriveMounts:type_name -> FirecrackerDriveMount
	23, // 3: CreateVMRequest.NetworkInterfaces:type_name -> FirecrackerNetworkInterface
	13, // 4: CreateVMRequest.JailerConfig:type_name -> JailerConfig
	24, // 5: CreateVMRequest.BalloonDevice:type_name -> FirecrackerBalloonDevice
	0,  // 6: JailerConfig.DriveExposePolicy:type_name -> DriveExposePolicy
	24, // 7: GetBalloonConfigResponse.BalloonConfig:type_name -> FirecrackerBalloonDevice
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_firecracker_proto_init() }
func file_firecracker_proto_init() {
	if File_firecracker_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_firecracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVMInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVMInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVMMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVMMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVMMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVMMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JailerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalloonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalloonConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalloonConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalloonStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalloonStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firecracker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalloonStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_firecracker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_firecracker_proto_goTypes,
		DependencyIndexes: file_firecracker_proto_depIdxs,
		EnumInfos:         file_firecracker_proto_enumTypes,
		MessageInfos:      file_firecracker_proto_msgTypes,
	}.Build()
	File_firecracker_proto = out.File
	file_firecracker_proto_rawDesc = nil
	file_firecracker_proto_goTypes = nil
	file_firecracker_proto_depIdxs = nil
}
